<?php

namespace SicrediAPI\Domain;

use DateTime;

class Boleto
{
    private $chargeKind;
    private $beneficiaryCode;
    private $beneficiary;
    private $payee;
    private $documentType;

    /**
     * Number that identifies the boleto in the bank.
     * Optional, if not set, will be generated by the bank.
     * @var string
     */
    private $ourNumber;

    /**
     * Number that identifies the boleto in the beneficiary system.
     * Required, if not set, will be generated by the bank.
     * @var string
     */
    private $yourNumber;
    private $dueDate;
    private $issueDate;
    private $amount;

    private $wallet;
    private $status;

    /**
     * Discounts configuration
     * @var DiscountConfiguration
     */
    private $discountConfiguration;

    /**
     * Interest configuration
     * @var InterestConfiguration
     */
    private $interestConfiguration;

    private $messages;
    private $information;

    private $paymentInformation;

    private $liquidation;

    public function __construct(
        Beneficiary $beneficiary,
        Payee $payee,
        float $amount,
        string $chargeKind = null,
        int $beneficiaryCode = null,
        string $documentType = null,
        string $yourNumber,
        DateTime $dueDate,
        DateTime $issueDate = null,
        string $ourNumber = null,
        DiscountConfiguration $discountConfiguration = null,
        InterestConfiguration $interestConfiguration = null,
        Messages $messages = null,
        Information $information = null
    ) {
        $this->chargeKind = $chargeKind;
        $this->beneficiaryCode = $beneficiaryCode;
        $this->beneficiary = $beneficiary;
        $this->payee = $payee;
        $this->documentType = $documentType;
        $this->ourNumber = $ourNumber;
        $this->yourNumber = $yourNumber;
        $this->dueDate = $dueDate;
        $this->amount = $amount;
        $this->issueDate = $issueDate;

        // If no issued date is provided, use today
        if (empty($issueDate)) {
            $issueDate = new DateTime();
        }

        // Due date must be greater or equal than today
        if ($dueDate < $issueDate) {
            throw new \InvalidArgumentException("Due date must be greater or equal than today");
        }

        // Amount must be greater than 0
        if ($amount <= 0) {
            throw new \InvalidArgumentException("Amount must be greater than 0");
        }

        if (strlen($yourNumber) > 10) {
            throw new \InvalidArgumentException("Your number must have at most 10 characters");
        }

        if ($beneficiary->getDocument() === $payee->getDocument()) {
            throw new \InvalidArgumentException("Beneficiary document must be different than payee document");
        }

        if (!empty($beneficiaryCode) && strlen($beneficiaryCode) !== 5) {
            throw new \InvalidArgumentException("Beneficiary code must have 5 digits");
        }

        if (!empty($discountConfiguration)) {
            $this->setDiscounts($discountConfiguration);
        }

        if (!empty($interestConfiguration)) {
            $this->setInterests($interestConfiguration);
        }

        if (!empty($messages)) {
            $this->setMessages($messages);
        }

        if (!empty($information)) {
            $this->setInformation($information);
        }

        return $this;
    }

    public function getChargeKind()
    {
        return $this->chargeKind;
    }

    public function getBeneficiaryCode()
    {
        return $this->beneficiaryCode;
    }

    public function getBeneficiary(): Beneficiary
    {
        return $this->beneficiary;
    }

    public function getPayee(): Payee
    {
        return $this->payee;
    }

    public function getDocumentType()
    {
        return $this->documentType;
    }

    public function getOurNumber()
    {
        return $this->ourNumber;
    }

    public function setOurNumber($ourNumber)
    {
        $this->ourNumber = $ourNumber;
    }

    public function getYourNumber()
    {
        return $this->yourNumber;
    }

    public function getDueDate()
    {
        return $this->dueDate;
    }

    public function getAmount()
    {
        return $this->amount;
    }

    public function getMessages()
    {
        return $this->messages;
    }

    public function getInformation()
    {
        return $this->information;
    }

    public function setDiscounts(DiscountConfiguration $discountConfiguration)
    {
        $discountConfiguration->validateAgainstDueDate($this->dueDate);
        $discountConfiguration->validateAgainstAmount($this->amount);
        $this->discountConfiguration = $discountConfiguration;
    }

    public function getDiscounts()
    {
        return $this->discountConfiguration;
    }

    public function setInterests(InterestConfiguration $interestConfiguration)
    {
        $interestConfiguration->validateAgainstAmount($this->amount);
        $this->interestConfiguration = $interestConfiguration;
    }

    public function getInterests()
    {
        return $this->interestConfiguration;
    }

    public function setMessages(Messages $messages)
    {
        $this->messages = $messages;
    }

    public function setInformation(Information $informatives)
    {
        $this->information = $informatives;
    }

    public function getPaymentInformation()
    {
        return $this->paymentInformation;
    }

    public function setPaymentInformation(PaymentInformation $paymentInformation)
    {
        $this->paymentInformation = $paymentInformation;
    }

    public function setYourNumber($yourNumber)
    {
        $this->yourNumber = $yourNumber;
    }

    public function getIssueDate()
    {
        return $this->issueDate;
    }

    public function getStatus()
    {
        return $this->status;
    }

    public function setStatus($status)
    {
        // TODO: validate status
        // if (!in_array($status, ['PENDING', 'PAID', 'CANCELED'])) {
        //     throw new \InvalidArgumentException("Invalid status");
        // }

        $this->status = $status;
    }

    public function setWallet($wallet)
    {
        $this->wallet = $wallet;
    }

    public function getWallet()
    {
        return $this->wallet;
    }

    public function getLiquidation()
    {
        return $this->liquidation;
    }

    public function setLiquidation(Liquidation $liquidation)
    {
        $this->liquidation = $liquidation;
    }

}
